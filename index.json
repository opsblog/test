[{"date":"1584826587", "url":"https://opsblog.de/2020/03/21/einfaches-vpn-mit-wireguard-fuer-homeoffice/", "title":"Einfaches VPN mit Wireguard für Homeoffice", "summary":"Aufgrund der „Corona-Kriese“ möchte auch ich etwas für unser Land tun und hier eine leicht Verständliche Anleitung schreiben wie man einen VPN-Zugang mithilfe von Wireguard für die Anwendung im Homeoffice einrichten kann.", "content":"Aufgrund der „Corona-Kriese“ möchte auch ich etwas für unser Land tun und hier eine leicht Verständliche Anleitung schreiben wie man einen VPN-Zugang mithilfe von Wireguard für die Anwendung im Homeoffice einrichten kann.\nWireguard ist eine recht neue VPN-Lösung mit einem sehr schlanken und effizienten Protokoll, welches sich zudem auch noch sehr einfach einrichten lässt (im Vergleich z.B. zu OpenVPN).\nIm Idealfall nutzen wir als Host-Betriebssystem für den Server ein Debian-Derivat-Linux mit einem 5.x Kernel, da die Wireguard Kernelmodule in Kerneln ab Version 5 bereits einkompiliert sind und man diese dann nicht selbst für den aktuell verwendeten Kernel neu bauen muss.\nHat man nicht den Genuss einen 5er Linux Kernel zu nutzen oder auf ihn zu upgraden, muss man die Wiregiard-Kernel Module für den verwendeten Kernel selbst bauen.\nDazu Installieren wir das Meta-Paket „wireguard“ aus dem Unstable zweig, welches dann die Pakete „wireguard-dkms“ und „wireguard-tools“ installiert:\n# echo \u0026quot;deb http://deb.debian.org/debian/ unstable main\u0026quot; | sudo tee /etc/apt/sources.list.d/unstable-wireguard.list\r# printf 'Package: *\\nPin: release a=unstable\\nPin-Priority: 90\\n' | sudo tee /etc/apt/preferences.d/limit-unstable\r# apt update\r# apt install wireguard\rNun werden die besagten Pakete „wireguard-dkms“ und „wireguard-tools“ installiert und „wireguard-dkms“ sorgt dafür dass das Kernel-Modul erstellt wird:\nHolen:1 http://deb.debian.org/debian unstable/main amd64 wireguard-dkms all 0.0.20200215-2 [252 kB]\rHolen:2 http://deb.debian.org/debian unstable/main amd64 wireguard-tools amd64 1.0.20200206-2 [85,2 kB]\rHolen:3 http://deb.debian.org/debian unstable/main amd64 wireguard all 1.0.20200206-2 [7.316 B]\rEs wurden 345 kB in 0 s geholt (1.497 kB/s).\rVormals nicht ausgewähltes Paket wireguard-dkms wird gewählt.\r(Lese Datenbank ... 67277 Dateien und Verzeichnisse sind derzeit installiert.)\rVorbereitung zum Entpacken von .../wireguard-dkms_0.0.20200215-2_all.deb ...\rEntpacken von wireguard-dkms (0.0.20200215-2) ...\rVormals nicht ausgewähltes Paket wireguard-tools wird gewählt.\rVorbereitung zum Entpacken von .../wireguard-tools_1.0.20200206-2_amd64.deb ...\rEntpacken von wireguard-tools (1.0.20200206-2) ...\rVormals nicht ausgewähltes Paket wireguard wird gewählt.\rVorbereitung zum Entpacken von .../wireguard_1.0.20200206-2_all.deb ...\rEntpacken von wireguard (1.0.20200206-2) ...\rwireguard-dkms (0.0.20200215-2) wird eingerichtet ...\rLoading new wireguard-0.0.20200215 DKMS files...\rBuilding for 4.9.0-6-amd64\rBuilding initial module for 4.9.0-6-amd64\rDone.\rwireguard:\rRunning module version sanity check.\r- Original module\r- No original module exists within this kernel\r- Installation\r- Installing to /lib/modules/4.9.0-6-amd64/updates/dkms/\rdepmod....\rDKMS: install completed.\rwireguard-tools (1.0.20200206-2) wird eingerichtet ...\rwireguard (1.0.20200206-2) wird eingerichtet ...\rTrigger für man-db (2.7.6.1-2) werden verarbeitet ...\rDamit haben wir Wireguard und das passende Kernel-Modul installiert und können nun an die Konfiguration gehen.\nHierfür gehen wir in /etc/wireguard und erstellen uns einen public-key und einen private-key:\n# cd /etc/wireguard\r# wg genkey | tee privatekey | wg pubkey \u0026gt; publickey\rFür mein Beispiel nutze ich folgende Keys:\nPrivate: 8NTdGTXDBH2pGLb08nMC007ZjpQE666PYrqmgyASUS= Public: I2btYR+gLPYDi76p/MyAnniSWbubELyh5YHoseKxu0s=\rDer Private-Key wird für die Server-Config genutzt. Der Public-Key wird dann in der Config der Clients hinterlegt.\nSinnvollerweise befinden sich die VPN-Clients alle in einem seperaten IP-Netz (10.0.0.x) wobei der VPN-Server die IP 10.0.0.1 bekommt und der erste Client dann die 10.0.0.2.\nMit diesem Wissen erstellen wir nun die Server-Konfiguration in /etc/wireguard/wg0.conf:\n[Interface]\rAddress = 10.0.0.1/24\rSaveConfig = false\rPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ListenPort = 51820\rFwMark = 0xca6c\rPrivateKey = 8NTdGTXDBH2pGLb08nMC007ZjpQE666PYrqmgyASUS=\rDas war es auch schon grundsätzlich zur Server-Config. Später mussen hier noch die Zugänge der Clients mit rein – das folgt weiter unten.\nDer Wireguard-Server läuft auf Port 51820, was bedeutet das wir diesen Port in der Firewall freigeben bzw ein Portforwarding für diesen Port erstellen müssen.\nAusserdem muss der Eintrag „net.ipv4.ip_forward = 1“ in der /etc/sysctl.conf auskommentiert werden.\nMein Wireguard Client ist ein Windows10 PC.\nDie Client-Installation können wir uns unter https://www.wireguard.com/install bzw. als Direktlink (64Bit) unter https://download.wireguard.com/windows-client/wireguard-amd64-0.1.0.msi herunterladen und installieren.\nNachdem Wireguard auf dem Client installiert und geöffnet ist, können wir über „Strg+N“ oder „Add empty Tunnel..“ einen neuen Tunnel definieren.\nWichtig ist hier als erstes der Public-Key welcher oben eingeblendet wird (z.B. 6n89/e9rMmXYaymRDMYnnjJ7LgiVnP6GKplHYN6+BQY=).\nDiesen Client-PublicKey brauchen wir um den Client in der Server-Config mit aufzunehmen.\nAn dieser Stelle geht es aber erst einmal mit der Client-Config weiter.\n# Angabe des VPN-Client (PrivateKey und VPN-IP)\r[Interface]\rPrivateKey = 8OvLmuLKv2GUSfeJ4bcEGF2mTeuySKJhoBQPlSgmGUA=\rAddress = 10.0.0.2/32\r# Angabe des VPN-Servers (Public-Key, IP´s welche über VPN geroutet werden und der Endpunkt des VPN-Servers)\r[Peer]\rPublicKey = I2btYR+gLPYDi76p/MyAnniSWbubELyh5YHoseKxu0s=\rAllowedIPs = 10.0.0.1, 192.168.1.0/24\rEndpoint = vpn.meinefirma.de:51820\rKurze Erklärung: Mein „Firmen-Netz“, welches ich über den VPN-Tunnel erreichen möchte ist das 192.168.1.x Netz.\nÜber den Eintrag „AllowedIPs“ gebe ich hier an welche IP´s/Netze über den VPN-Tunnel geroutet werden sollen.\nIm Wireguard-Client selbst sieht das ganze dann so aus:\nJetzt müssen wir weider zurück zu der Server-Config und den Client in der Konfiguration mit angeben.\nDafür fügen wir Analog zur Client-Config auch einen [Peer] Abschnitt unten mit in die /etc/wireguard/wg0.conf ein:\n# VPN-Client Sven (Angabe des PublicKey und der IP des Clients)\r[Peer]\rPublicKey = 6n89/e9rMmXYaymRDMYnnjJ7LgiVnP6GKplHYN6+BQY=\rAllowedIPs = 10.0.0.2/32\rDas wars auch schon. Jetzt haben wir Wireguard auf Server und Client Installiert und eingerichtet.\nDann wollen wir den Server auch mal starten. Der Start und Stop funktioniert über die wg-quick Befehle.\nZum Starten reicht ein „wg-quick up wg0“ und zum beenden analog dazu ein „wg-quick down wg0“.\nDie Ausgabe des „wg-quick up wg0“ sollte dann so aussehen:\n# wg-quick up wg0\r[#] ip link add wg0 type wireguard\r[#] wg setconf wg0 /dev/fd/63\r[#] ip -4 address add 10.0.0.1/24 dev wg0\r[#] ip link set mtu 1420 up dev wg0\r[#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;\rDamit läuft Wireguard als VPN-Server.\nIm Windows-Client muss man nun nur noch auf dem Knopf „Activate“ drücken – und es wird eine Verbindung zum VPN-Server aufgebaut.\nAb nun können wir von „remote“ auf das „Firmen“-Netz zugreifen.\n","tags":["Linux"], "section": "post"},{"date":"1533665798", "url":"https://opsblog.de/2018/08/07/arduino-einfuehrung/", "title":"Arduino – Einführung", "summary":"Dies ist der erste Teil einer Arduino-Reihe.\nAufgrund aktueller Projekte habe ich wieder vermehrt mit Arduino zu tun, so dass ich in meinen Unterlagen von 2016 rumsuchen und experimentieren musste – also wollte ich meine Unterlagen in diesem Zuge gleich mit digitalisieren.", "content":"Dies ist der erste Teil einer Arduino-Reihe.\nAufgrund aktueller Projekte habe ich wieder vermehrt mit Arduino zu tun, so dass ich in meinen Unterlagen von 2016 rumsuchen und experimentieren musste – also wollte ich meine Unterlagen in diesem Zuge gleich mit digitalisieren.\nMeine Projekte führe ich zum Großteil mit dem Arduino Nano durch – einfach aus dem Grund weil es diese Boards im China-Shop im 10er Pack recht günstig gibt.\nNormalerweise fangen die Leute mit dem Arduino Uno an – beide Boards (Uno und Nano) unterscheiden sich aber kaum von der Technischen Seite.\nHier der Offizielle Link zum Arduino Uno: https://store.arduino.cc/arduino-uno-rev3\nUnd hier zum Arduino Nano: https://store.arduino.cc/arduino-nano\nDer größte unterschied den man auf dem ersten Blick sieht ist wohl die Größe des Boards an sich.\nDer Arduino Nano eignet sich eher für die Steckbrett-Versuche aufgrund der Breadboard-kompatiblen Größe.\nOkay.. dann fangen wir mal an.\nWir haben jetzt im Idealfall einen Arduino Uno oder Nano vor uns liegen, ein Steckbrett, ein paar Kabel, ein paar LED´s und ein paar Wiederstände (dazu später mehr).\nWie fangen wir nun an?\nAls erstes brauchen wir eine Software um die Programme zu schreiben die später auf den Arduino laufen sollen.\nHierfür nutzt man Standardmäßig die Arduino-IDE welche man in der Version 1.8.5 unter https://www.arduino.cc/download_handler.php?f=/arduino-1.8.5-windows.zip als portable Version herunterladen kann.\nDiese habe ich bei mir in das Verzeichnis C:\\Arduino\\arduino-1.8.5 gelegt. Dort drin befindet sich nun die IDE, welche wir über die Arduino.exe aufrufen können.\nSobald man die IDE Aufgerufen hat, bekommt man einen neuen Sketch angezeigt.\nSketche nennt man die Programme, welche man mit der Arduino-IDE schreibt.\nDer neue Sketch sieht dann in etwa so aus:\nvoid setup() { // put your setup code here, to run once:  } void loop() { // put your main code here, to run repeatedly:  } Im Prinzip gibt es eine setup() Funktion in der man alle relevanten Einstellungen VOR dem Programmstart hinterlegt – und es gibt eine loop(), also eine Endlosschleife, welche immer wieder durch den Arduino aufgerufen wird.\nNun kennen wir auch das Funktionsprinzip des Arduinos – alles wird in einer Endlosschleife ausgeführt.\nUm das etwas genauer zu sehen, öffnen wir eines der vielen Beispiele, welche zusammen mit der Arduino-IDE ausgeliefert werden unter: Datei -\u0026gt; Beispiele -\u0026gt; 01.Basics -\u0026gt; Blink\nDieses Blink-Programm läuft Standardmäßig auf jedem Arduino Board. Wenn man jetzt den UNO oder Nano über USB an eine Stromquelle anschließen würde, würde dieses Programm vom Werk aus darauf laufen – und eine LED auf dem Arduino-Board blinken.\nDer Sketch dafür sieht dann so aus:\n// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(1000); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(1000); // wait for a second } Wie oben erwähnt setzen wir in der Setup() Funktion die Einstellungen die vor dem eigentlichen Programmstart feststehen sollen. In diesem Fall wird der GPIO-Pin 13 als Ausgang definiert. An diesem Pin ist in den meisten Fällen eine LED auf dem Board angeschlossen.\nIn der loop() wird nun gesagt das am Pin 13 ein HIGH Signal angelegt werden soll.\nDies geschieht durch die Funktion digitalWrite() da der Pin 13 ein Digitaler Pin ist.\nDa der Arduino mit einer Spannung von 5V arbeitet bedeutet das HIGH Signal hier, das diese 5V durchgereicht werden und die LED leuchtet.\nDanach wird über das delay(1000) eine Wartezeit von 1000ms – also einer Sekunde – festgelegt, bevor das Programm weiter ausgeführt wird.\nDann wird ein LOW Signal, also 0V am Pin 13 ausgegeben – damit leuchtet die LED dann nicht mehr.\nUnd am ende wird wieder eine Sekunde gewartet.\nDa uns eine Sekunde zu langsam ist, ändern wir die 1000ms hier einfach mal in 100ms ab.\nWenn wir nun den Arduino über ein USB-Kabel an den PC anschließen, können wir diesen in der Arduino-IDE auswählen:\nUnter „Werkzeuge“ -\u0026gt; „Board, Prozessor, Port“: Arduino Nano, ATmega328 on COM3\nÜber den Button1 (erste Knopf oben links in der Arduino-IDE) kann man nun das Programm kompilieren und schauen ob man Fehler gemacht hat. Für dieses Beispiel werden aber keine Fehler gefunden.\nNun kann man über den Button2 (Rechts neben Button1 in der Arduino-IDE) das Programm zum Arduino geben.\nIn der IDE sollte dann in etwa so eine Ausgabe erscheinen:\nDer Sketch verwendet 1.030 Bytes (3%) des Programmspeicherplatzes. Das Maximum sind 30.720 Bytes.\rGlobale Variablen verwenden 9 Bytes (0%) des dynamischen Speichers, 2.039 Bytes für lokale Variablen verbleiben. Das Maximum sind 2.048 Bytes.\rWenn dieser dann fertig ist, startet er neu und das neue Programm läuft. Was wir nun sehen ist das die LED nicht mehr jede Sekunde blinkt, sondern alle 100 Millisekunden.\nSehr schön! Da haben wir doch schon einiges für den Anfang geschafft 🙂\n","tags":["Arduino"], "section": "post"},{"date":"1483712219", "url":"https://opsblog.de/2017/01/06/sql-server-localdb-mehrere-versionen-verwalten/", "title":"SQL Server localdb – Mehrere Versionen verwalten", "summary":"Vor einiger Zeit habe ich HIER schon mal etwas über SQLServer 2012 localdb geschrieben.\nMittlerweile gibt es von der localdb installation mehrere Versionen (Aktuell: 2012 / 2014 / 2016).\nUm Herauszufinden welche Versionen auf dem System installiert sind, kann der Befehl „sqllocaldb versions“ genutzt werden:\nE:\\Programme\\cmder\u0026gt;sqllocaldb versions Microsoft SQL Server 2012 (11.0.5058.0) Microsoft SQL Server 2014 (12.0.4100.1) Microsoft SQL Server 2016 (13.0.1601.5) Microsoft SQL Server 2017 (14.0.1000.169) Standardmäßig wird eine neue Datenbank-Instanz über den „Create“-Befehl mit der aktuelleren Version angelegt.\nMöchte man eine Instanz mit der 2012er Version anlegen, geht dies so:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2012 11.0.5058.0 LocalDB instance \u0026quot;SQL2012\u0026quot; created with version 11.0.5058.0. Und für die 2014er Version so:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2014 12.0.4100.1 LocalDB instance \u0026quot;SQL2014\u0026quot; created with version 12.0.4100.1. Ebenfalls kann so auch explizit eine 2016er Instanz angelegt werden:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2016 13.0.1601.5 LocalDB instance \u0026quot;SQL2016\u0026quot; created with version 13.0.1601.5. Oder für eine 2017er Instanz:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2017 14.0.1000.169 LocalDB instance \u0026quot;SQL2017\u0026quot; created with version 14.0.1000.169. ", "content":"Vor einiger Zeit habe ich HIER schon mal etwas über SQLServer 2012 localdb geschrieben.\nMittlerweile gibt es von der localdb installation mehrere Versionen (Aktuell: 2012 / 2014 / 2016).\nUm Herauszufinden welche Versionen auf dem System installiert sind, kann der Befehl „sqllocaldb versions“ genutzt werden:\nE:\\Programme\\cmder\u0026gt;sqllocaldb versions Microsoft SQL Server 2012 (11.0.5058.0) Microsoft SQL Server 2014 (12.0.4100.1) Microsoft SQL Server 2016 (13.0.1601.5) Microsoft SQL Server 2017 (14.0.1000.169) Standardmäßig wird eine neue Datenbank-Instanz über den „Create“-Befehl mit der aktuelleren Version angelegt.\nMöchte man eine Instanz mit der 2012er Version anlegen, geht dies so:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2012 11.0.5058.0 LocalDB instance \u0026quot;SQL2012\u0026quot; created with version 11.0.5058.0. Und für die 2014er Version so:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2014 12.0.4100.1 LocalDB instance \u0026quot;SQL2014\u0026quot; created with version 12.0.4100.1. Ebenfalls kann so auch explizit eine 2016er Instanz angelegt werden:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2016 13.0.1601.5 LocalDB instance \u0026quot;SQL2016\u0026quot; created with version 13.0.1601.5. Oder für eine 2017er Instanz:\nE:\\Programme\\cmder\u0026gt;sqllocaldb create SQL2017 14.0.1000.169 LocalDB instance \u0026quot;SQL2017\u0026quot; created with version 14.0.1000.169. Hier noch einmal die Komplette SQL Server localdb Hilfe:\nE:\\Programme\\cmder\u0026gt;sqllocaldb -? Microsoft (R) SQL Server Express LocalDB Command Line Tool Version 11.0.5058.0 Copyright (c) Microsoft Corporation. All rights reserved. Usage: SqlLocalDB operation [parameters...] Operations: -? Prints this information create|c \u0026quot;instance name\u0026quot; [version-number] [-s] Creates a new LocalDB instance with a specified name and version If the [version-number] parameter is omitted, it defaults to the SqlLocalDB product version. -s starts the new LocalDB instance after it's created delete|d \u0026quot;instance name\u0026quot; Deletes the LocalDB instance with the specified name start|s \u0026quot;instance name\u0026quot; Starts the LocalDB instance with the specified name stop|p \u0026quot;instance name\u0026quot; [-i|-k] Stops the LocalDB instance with the specified name, after current queries finish -i request LocalDB instance shutdown with NOWAIT option -k kills LocalDB instance process without contacting it share|h [\u0026quot;owner SID or account\u0026quot;] \u0026quot;private name\u0026quot; \u0026quot;shared name\u0026quot; Shares the specified private instance using the specified shared name. If the user SID or account name is omitted, it defaults to current user. unshare|u \u0026quot;shared name\u0026quot; Stops the sharing of the specified shared LocalDB instance. info|i Lists all existing LocalDB instances owned by the current user and all shared LocalDB instances. info|i \u0026quot;instance name\u0026quot; Prints the information about the specified LocalDB instance. versions|v Lists all LocalDB versions installed on the computer. trace|t on|off Turns tracing on and off SqlLocalDB treats spaces as delimiters. It is necessary to surround instance names that contain spaces and special characters with quotes. For example: SqlLocalDB create \u0026quot;My LocalDB Instance\u0026quot; ","tags":["MSSQL"], "section": "post"}]